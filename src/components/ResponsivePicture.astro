---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

export interface Props {
  src: string | ImageMetadata;
  alt: string;
  widths?: number[];
  sizes?: string;
  loading?: 'eager' | 'lazy';
  class?: string;
  formats?: Array<'avif' | 'webp' | 'png' | 'jpg' | 'jpeg'>;
  fallbackFormat?: 'png' | 'jpg' | 'jpeg';
  quality?: number;
  aspectRatio?: string;
  artDirected?: {
    mobile?: string | ImageMetadata;
    tablet?: string | ImageMetadata;
    desktop?: string | ImageMetadata;
  };
}

const {
  src,
  alt,
  widths = [400, 800, 1200, 1600],
  sizes = '(max-width: 640px) 100vw, (max-width: 1024px) 80vw, 1200px',
  loading = 'lazy',
  class: className,
  formats = ['avif', 'webp'],
  fallbackFormat = 'jpg',
  quality = 80,
  aspectRatio,
  artDirected,
} = Astro.props;

// Helper to determine if we're dealing with actual image metadata
const isImageMetadata = (src: any): src is ImageMetadata => {
  return typeof src === 'object' && 'src' in src;
};

// Placeholder for when images aren't available
const placeholderSrc = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1200' height='800'%3E%3Crect width='100%25' height='100%25' fill='%23e5e7eb'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='%236b7280' font-family='system-ui' font-size='20'%3EPicture Placeholder%3C/text%3E%3C/svg%3E`;
---

<div class={`picture-container ${className || ''}`} data-aspect-ratio={aspectRatio}>
  {artDirected ? (
    <picture>
      {/* Mobile source */}
      {artDirected.mobile && (
        <source
          media="(max-width: 640px)"
          srcset={isImageMetadata(artDirected.mobile) ? artDirected.mobile.src : artDirected.mobile}
        />
      )}
      
      {/* Tablet source */}
      {artDirected.tablet && (
        <source
          media="(max-width: 1024px)"
          srcset={isImageMetadata(artDirected.tablet) ? artDirected.tablet.src : artDirected.tablet}
        />
      )}
      
      {/* Desktop/default image */}
      <img
        src={isImageMetadata(src) ? src.src : src}
        alt={alt}
        loading={loading}
        class="responsive-picture"
      />
    </picture>
  ) : isImageMetadata(src) ? (
    <Picture
      src={src}
      alt={alt}
      widths={widths}
      sizes={sizes}
      loading={loading}
      formats={formats}
      fallbackFormat={fallbackFormat}
      quality={quality}
      class="responsive-picture"
    />
  ) : typeof src === 'string' && src.startsWith('http') ? (
    <picture>
      <img
        src={src}
        alt={alt}
        loading={loading}
        sizes={sizes}
        class="responsive-picture"
      />
    </picture>
  ) : (
    <picture>
      <img
        src={placeholderSrc}
        alt={alt}
        loading={loading}
        class="responsive-picture placeholder"
      />
    </picture>
  )}
</div>

<style>
  .picture-container {
    position: relative;
    display: block;
    overflow: hidden;
    background-color: var(--picture-placeholder-bg, #e5e7eb);
  }

  .picture-container[data-aspect-ratio] {
    aspect-ratio: var(--aspect-ratio);
  }

  .responsive-picture {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .responsive-picture.placeholder {
    filter: blur(3px);
    opacity: 0.7;
  }

  /* Loading skeleton effect */
  .picture-container::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent 0%,
      rgba(255, 255, 255, 0.4) 50%,
      transparent 100%
    );
    animation: pictureSkeleton 1.5s ease-in-out infinite;
    opacity: 0;
    pointer-events: none;
  }

  .picture-container.loading::after {
    opacity: 1;
  }

  @keyframes pictureSkeleton {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }
</style>