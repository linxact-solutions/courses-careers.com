---
// Cookie Manager Component - More complete implementation
---

<div id="cookie-manager" class="hidden fixed bottom-0 left-0 right-0 z-40 bg-white shadow-2xl border-t border-gray-200" role="dialog" aria-labelledby="cookie-banner-title" aria-describedby="cookie-banner-description">
  <div class="max-w-7xl mx-auto p-4 sm:p-6">
    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
      <div class="flex-1">
        <h3 id="cookie-banner-title" class="text-lg font-semibold text-gray-900 mb-2">
          Cookie Preferences
        </h3>
        <p id="cookie-banner-description" class="text-sm text-gray-600 mb-4">
          We use cookies to enhance your experience, analyze site traffic, and for marketing purposes. 
          You can manage your preferences or accept all cookies.
        </p>
        
        <!-- Cookie Details (Hidden by default) -->
        <div id="cookie-details" class="hidden space-y-3 mb-4">
          <div class="flex items-center justify-between py-2 border-b border-gray-100">
            <div class="flex-1">
              <h4 class="font-medium text-gray-900">Necessary Cookies</h4>
              <p class="text-xs text-gray-500">Essential for the website to function properly. Cannot be disabled.</p>
            </div>
            <div class="flex items-center">
              <input type="checkbox" id="necessary-cookies" checked disabled class="h-4 w-4 text-primary-600 rounded border-gray-300">
              <label for="necessary-cookies" class="sr-only">Necessary cookies (always enabled)</label>
            </div>
          </div>
          
          <div class="flex items-center justify-between py-2 border-b border-gray-100">
            <div class="flex-1">
              <h4 class="font-medium text-gray-900">Analytics Cookies</h4>
              <p class="text-xs text-gray-500">Help us understand how visitors interact with our website (Google Analytics, Matomo)</p>
            </div>
            <div class="flex items-center">
              <input type="checkbox" id="analytics-cookies" class="h-4 w-4 text-primary-600 rounded border-gray-300 cursor-pointer">
              <label for="analytics-cookies" class="sr-only">Analytics cookies</label>
            </div>
          </div>
          
          <div class="flex items-center justify-between py-2 border-b border-gray-100">
            <div class="flex-1">
              <h4 class="font-medium text-gray-900">Marketing Cookies</h4>
              <p class="text-xs text-gray-500">Used for advertising and remarketing (HubSpot, Optimizely)</p>
            </div>
            <div class="flex items-center">
              <input type="checkbox" id="marketing-cookies" class="h-4 w-4 text-primary-600 rounded border-gray-300 cursor-pointer">
              <label for="marketing-cookies" class="sr-only">Marketing cookies</label>
            </div>
          </div>
          
          <div class="flex items-center justify-between py-2">
            <div class="flex-1">
              <h4 class="font-medium text-gray-900">Functional Cookies</h4>
              <p class="text-xs text-gray-500">Enable enhanced functionality like live chat and personalization (Intercom)</p>
            </div>
            <div class="flex items-center">
              <input type="checkbox" id="functional-cookies" class="h-4 w-4 text-primary-600 rounded border-gray-300 cursor-pointer">
              <label for="functional-cookies" class="sr-only">Functional cookies</label>
            </div>
          </div>
        </div>
        
        <div class="flex flex-wrap gap-4 text-xs text-gray-500 mb-4">
          <a href="/privacy-policy" class="hover:text-primary-600 transition-colors">Privacy Policy</a>
          <a href="/terms-of-service" class="hover:text-primary-600 transition-colors">Terms of Service</a>
          <button id="toggle-details" class="hover:text-primary-600 transition-colors font-medium">
            Manage Preferences
          </button>
        </div>
      </div>
      
      <div class="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
        <button id="reject-all" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors">
          Reject All
        </button>
        <button id="accept-selected" class="hidden px-4 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-lg transition-colors">
          Accept Selected
        </button>
        <button id="accept-all" class="px-4 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-lg transition-colors">
          Accept All
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  class CookieManager {
    constructor() {
      this.banner = document.getElementById('cookie-manager');
      this.detailsSection = document.getElementById('cookie-details');
      this.toggleButton = document.getElementById('toggle-details');
      this.acceptAllButton = document.getElementById('accept-all');
      this.acceptSelectedButton = document.getElementById('accept-selected');
      this.rejectAllButton = document.getElementById('reject-all');
      
      this.init();
    }
    
    async init() {
      const { hasConsented } = await import('../lib/cookies');
      
      if (!hasConsented()) {
        this.showBanner();
      }
      
      this.bindEvents();
    }
    
    bindEvents() {
      this.toggleButton?.addEventListener('click', () => this.toggleDetails());
      this.acceptAllButton?.addEventListener('click', () => this.acceptAll());
      this.acceptSelectedButton?.addEventListener('click', () => this.acceptSelected());
      this.rejectAllButton?.addEventListener('click', () => this.rejectAll());
      
      // Handle ESC key to close banner
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !this.banner.classList.contains('hidden')) {
          this.rejectAll();
        }
      });
      
      // Handle cookie preferences reopening
      window.addEventListener('showCookieConsent', () => {
        this.resetAndShow();
      });
    }
    
    showBanner() {
      this.banner.classList.remove('hidden');
      this.banner.setAttribute('aria-hidden', 'false');
      
      // Focus management for accessibility
      const firstButton = this.banner.querySelector('button');
      if (firstButton) {
        firstButton.focus();
      }
    }
    
    hideBanner() {
      this.banner.classList.add('hidden');
      this.banner.setAttribute('aria-hidden', 'true');
    }
    
    toggleDetails() {
      const isHidden = this.detailsSection.classList.contains('hidden');
      
      if (isHidden) {
        this.detailsSection.classList.remove('hidden');
        this.acceptAllButton.classList.add('hidden');
        this.acceptSelectedButton.classList.remove('hidden');
        this.toggleButton.textContent = 'Hide Details';
      } else {
        this.detailsSection.classList.add('hidden');
        this.acceptAllButton.classList.remove('hidden');
        this.acceptSelectedButton.classList.add('hidden');
        this.toggleButton.textContent = 'Manage Preferences';
      }
    }
    
    async acceptAll() {
      const { savePreferences } = await import('../lib/cookies');
      
      const preferences = {
        necessary: true,
        analytics: true,
        marketing: true,
        functional: true,
      };
      
      savePreferences(preferences);
      this.hideBanner();
      
      // Track consent acceptance
      this.trackConsentAction('accept_all');
    }
    
    async acceptSelected() {
      const { savePreferences } = await import('../lib/cookies');
      
      const preferences = {
        necessary: true,
        analytics: document.getElementById('analytics-cookies')?.checked || false,
        marketing: document.getElementById('marketing-cookies')?.checked || false,
        functional: document.getElementById('functional-cookies')?.checked || false,
      };
      
      savePreferences(preferences);
      this.hideBanner();
      
      // Track consent acceptance
      this.trackConsentAction('accept_selected', preferences);
    }
    
    async rejectAll() {
      const { savePreferences, defaultPreferences } = await import('../lib/cookies');
      
      savePreferences(defaultPreferences);
      this.hideBanner();
      
      // Track consent rejection
      this.trackConsentAction('reject_all');
    }
    
    async resetAndShow() {
      const { deleteCookie, COOKIE_CONSENT_KEY, COOKIE_PREFERENCES_KEY } = await import('../lib/cookies');
      
      deleteCookie(COOKIE_CONSENT_KEY);
      deleteCookie(COOKIE_PREFERENCES_KEY);
      
      // Reset form state
      document.getElementById('analytics-cookies').checked = false;
      document.getElementById('marketing-cookies').checked = false;
      document.getElementById('functional-cookies').checked = false;
      
      // Show banner again
      this.showBanner();
    }
    
    trackConsentAction(action, preferences = null) {
      // Track consent actions for analytics (if analytics are enabled)
      if (window.gtag) {
        window.gtag('event', 'cookie_consent', {
          action: action,
          preferences: preferences ? JSON.stringify(preferences) : null,
        });
      }
      
      if (window._paq) {
        window._paq.push(['trackEvent', 'Cookie Consent', action, preferences ? JSON.stringify(preferences) : null]);
      }
    }
  }
  
  // Initialize cookie manager when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new CookieManager();
  });
</script>

<style>
  #cookie-manager {
    animation: slideUp 0.3s ease-out;
  }
  
  @keyframes slideUp {
    from {
      transform: translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  #cookie-manager.hidden {
    animation: slideDown 0.3s ease-in;
  }
  
  @keyframes slideDown {
    from {
      transform: translateY(0);
      opacity: 1;
    }
    to {
      transform: translateY(100%);
      opacity: 0;
    }
  }
</style>