---
import Layout from '../../../layouts/Layout.astro';
---

<Layout title="Reset Password - Courses & Careers" description="Reset your password for Courses & Careers account. Secure password recovery process.">
  <div class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    
    <!-- Breadcrumb -->
    <div class="bg-white py-4 border-b">
      <div class="container mx-auto px-4">
        <nav class="text-sm text-gray-600">
          <a href="/" class="hover:text-blue-600">Home</a>
          <span class="mx-2">></span>
          <span class="text-blue-600">Reset Password</span>
        </nav>
      </div>
    </div>

    <!-- Page Header -->
    <div class="bg-blue-600 text-white py-12">
      <div class="container mx-auto px-4">
        <div class="max-w-2xl mx-auto text-center">
          <h1 class="text-3xl md:text-4xl font-bold mb-4">Reset Your Password</h1>
          <p class="text-lg text-blue-100">
            Enter your new password below to regain access to your account
          </p>
        </div>
      </div>
    </div>

    <!-- Reset Form -->
    <div class="py-16">
      <div class="container mx-auto px-4">
        <div class="max-w-md mx-auto">
          
          <!-- Form Container -->
          <div class="bg-white rounded-lg shadow-lg p-8">
            <div class="text-center mb-8">
              <div class="bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m0 0a2 2 0 012 2m-2-2a2 2 0 00-2 2m2-2V5a2 2 0 00-2-2H9a2 2 0 00-2 2v2m0 0a2 2 0 002 2h10a2 2 0 002-2m0 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2m0 0a2 2 0 002 2h10a2 2 0 002-2"></path>
                </svg>
              </div>
              <h2 class="text-2xl font-bold text-gray-900 mb-2">Create New Password</h2>
              <p class="text-gray-600">Your new password must be secure and easy to remember</p>
            </div>

            <!-- Password Reset Form -->
            <form id="password-reset-form" class="space-y-6">
              <div>
                <label for="new-password" class="block text-sm font-medium text-gray-700 mb-2">
                  New Password
                </label>
                <div class="relative">
                  <input 
                    type="password" 
                    id="new-password" 
                    name="new-password"
                    required
                    minlength="8"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                    placeholder="Enter your new password"
                  />
                  <button 
                    type="button" 
                    id="toggle-password-1"
                    class="absolute inset-y-0 right-0 pr-3 flex items-center"
                  >
                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                  </button>
                </div>
                <div id="password-strength" class="mt-2 hidden">
                  <div class="flex items-center space-x-2">
                    <div class="flex-1 bg-gray-200 rounded-full h-2">
                      <div id="strength-bar" class="h-2 rounded-full transition-all duration-300"></div>
                    </div>
                    <span id="strength-text" class="text-sm font-medium"></span>
                  </div>
                </div>
              </div>

              <div>
                <label for="confirm-password" class="block text-sm font-medium text-gray-700 mb-2">
                  Confirm New Password
                </label>
                <div class="relative">
                  <input 
                    type="password" 
                    id="confirm-password" 
                    name="confirm-password"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                    placeholder="Confirm your new password"
                  />
                  <button 
                    type="button" 
                    id="toggle-password-2"
                    class="absolute inset-y-0 right-0 pr-3 flex items-center"
                  >
                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                  </button>
                </div>
                <div id="password-match" class="mt-1 text-sm hidden"></div>
              </div>

              <!-- Password Requirements -->
              <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-sm font-medium text-gray-900 mb-2">Password Requirements:</h3>
                <ul class="text-xs text-gray-600 space-y-1">
                  <li id="req-length" class="flex items-center">
                    <span class="w-4 h-4 mr-2">○</span>
                    At least 8 characters long
                  </li>
                  <li id="req-uppercase" class="flex items-center">
                    <span class="w-4 h-4 mr-2">○</span>
                    Contains uppercase letter (A-Z)
                  </li>
                  <li id="req-lowercase" class="flex items-center">
                    <span class="w-4 h-4 mr-2">○</span>
                    Contains lowercase letter (a-z)
                  </li>
                  <li id="req-number" class="flex items-center">
                    <span class="w-4 h-4 mr-2">○</span>
                    Contains number (0-9)
                  </li>
                  <li id="req-special" class="flex items-center">
                    <span class="w-4 h-4 mr-2">○</span>
                    Contains special character (!@#$%^&*)
                  </li>
                </ul>
              </div>

              <button 
                type="submit"
                id="reset-button"
                disabled
                class="w-full bg-gray-400 text-white py-3 px-4 rounded-lg font-medium transition duration-200 disabled:cursor-not-allowed hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              >
                Reset Password
              </button>
            </form>

            <!-- Additional Links -->
            <div class="mt-6 text-center space-y-2">
              <p class="text-sm text-gray-600">
                Remember your password? 
                <a href="/login" class="text-blue-600 hover:text-blue-800 font-medium">Sign in here</a>
              </p>
              <p class="text-sm text-gray-600">
                Need help? 
                <a href="/contact" class="text-blue-600 hover:text-blue-800 font-medium">Contact support</a>
              </p>
            </div>
          </div>

          <!-- Security Notice -->
          <div class="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div class="flex">
              <svg class="w-5 h-5 text-yellow-400 mr-3 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
              </svg>
              <div>
                <h3 class="text-sm font-medium text-yellow-800">Security Notice</h3>
                <p class="text-sm text-yellow-700 mt-1">
                  For your security, this password reset link will expire in 1 hour. 
                  Make sure to use a strong, unique password that you don't use elsewhere.
                </p>
              </div>
            </div>
          </div>

        </div>
      </div>
    </div>

  </div>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const newPasswordInput = document.getElementById('new-password');
  const confirmPasswordInput = document.getElementById('confirm-password');
  const resetButton = document.getElementById('reset-button');
  const form = document.getElementById('password-reset-form');
  const strengthBar = document.getElementById('strength-bar');
  const strengthText = document.getElementById('strength-text');
  const passwordStrength = document.getElementById('password-strength');
  const passwordMatch = document.getElementById('password-match');

  // Password visibility toggles
  document.getElementById('toggle-password-1').addEventListener('click', function() {
    togglePasswordVisibility('new-password', this);
  });
  
  document.getElementById('toggle-password-2').addEventListener('click', function() {
    togglePasswordVisibility('confirm-password', this);
  });

  function togglePasswordVisibility(inputId, button) {
    const input = document.getElementById(inputId);
    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
    input.setAttribute('type', type);
    
    // Update icon
    const icon = button.querySelector('svg');
    if (type === 'text') {
      icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L12 12m0 0l3.353 3.353M12 12l3.353-3.353"></path>';
    } else {
      icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>';
    }
  }

  // Password strength checker
  newPasswordInput.addEventListener('input', function() {
    const password = this.value;
    if (password.length > 0) {
      passwordStrength.classList.remove('hidden');
      checkPasswordStrength(password);
    } else {
      passwordStrength.classList.add('hidden');
    }
    updatePasswordRequirements(password);
    validateForm();
  });

  // Confirm password checker
  confirmPasswordInput.addEventListener('input', function() {
    checkPasswordMatch();
    validateForm();
  });

  function checkPasswordStrength(password) {
    let strength = 0;
    let color = '';
    let text = '';

    // Length check
    if (password.length >= 8) strength += 1;
    if (password.length >= 12) strength += 1;

    // Character type checks
    if (/[a-z]/.test(password)) strength += 1;
    if (/[A-Z]/.test(password)) strength += 1;
    if (/[0-9]/.test(password)) strength += 1;
    if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength += 1;

    // Determine strength level
    if (strength <= 2) {
      color = 'bg-red-500';
      text = 'Weak';
    } else if (strength <= 4) {
      color = 'bg-yellow-500';
      text = 'Medium';
    } else {
      color = 'bg-green-500';
      text = 'Strong';
    }

    strengthBar.className = `h-2 rounded-full transition-all duration-300 ${color}`;
    strengthBar.style.width = `${(strength / 6) * 100}%`;
    strengthText.textContent = text;
    strengthText.className = `text-sm font-medium ${color.replace('bg-', 'text-')}`;
  }

  function updatePasswordRequirements(password) {
    const requirements = [
      { id: 'req-length', test: password.length >= 8 },
      { id: 'req-uppercase', test: /[A-Z]/.test(password) },
      { id: 'req-lowercase', test: /[a-z]/.test(password) },
      { id: 'req-number', test: /[0-9]/.test(password) },
      { id: 'req-special', test: /[!@#$%^&*(),.?":{}|<>]/.test(password) }
    ];

    requirements.forEach(req => {
      const element = document.getElementById(req.id);
      const icon = element.querySelector('span');
      if (req.test) {
        element.classList.add('text-green-600');
        element.classList.remove('text-gray-600');
        icon.textContent = '✓';
      } else {
        element.classList.remove('text-green-600');
        element.classList.add('text-gray-600');
        icon.textContent = '○';
      }
    });
  }

  function checkPasswordMatch() {
    const password = newPasswordInput.value;
    const confirmPassword = confirmPasswordInput.value;

    if (confirmPassword.length > 0) {
      passwordMatch.classList.remove('hidden');
      if (password === confirmPassword) {
        passwordMatch.textContent = 'Passwords match';
        passwordMatch.className = 'mt-1 text-sm text-green-600';
      } else {
        passwordMatch.textContent = 'Passwords do not match';
        passwordMatch.className = 'mt-1 text-sm text-red-600';
      }
    } else {
      passwordMatch.classList.add('hidden');
    }
  }

  function validateForm() {
    const password = newPasswordInput.value;
    const confirmPassword = confirmPasswordInput.value;
    
    const hasMinLength = password.length >= 8;
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /[0-9]/.test(password);
    const hasSpecial = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    const passwordsMatch = password === confirmPassword && confirmPassword.length > 0;

    const isValid = hasMinLength && hasUppercase && hasLowercase && hasNumber && hasSpecial && passwordsMatch;

    resetButton.disabled = !isValid;
    if (isValid) {
      resetButton.className = 'w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium transition duration-200 hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2';
    } else {
      resetButton.className = 'w-full bg-gray-400 text-white py-3 px-4 rounded-lg font-medium transition duration-200 disabled:cursor-not-allowed';
    }
  }

  // Form submission
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Show loading state
    resetButton.disabled = true;
    resetButton.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Resetting Password...';

    // Simulate API call
    setTimeout(() => {
      // In a real application, you would send the data to your server
      alert('Password reset successful! You can now log in with your new password.');
      window.location.href = '/login';
    }, 2000);
  });
});
</script>

<style>
  /* Custom focus styles */
  input:focus {
    outline: none;
  }
  
  /* Loading animation */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  /* Smooth transitions */
  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
</style>